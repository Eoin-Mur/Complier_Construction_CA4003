/* Generated By:JavaCC: Do not edit this line. BASICLTokeniser.java */
public class BASICLTokeniser implements BASICLTokeniserConstants {
        public static void main(String args[])
        {
                BASICLTokeniser tokeniser;
                if(args.length == 0)
                {
                        System.out.println("Reading from standard input . . .");
                        tokeniser = new BASICLTokeniser(System.in);
                }else if (args.length == 1)
                {
                        try
                        {
                                tokeniser = new BASICLTokeniser(new java.io.FileInputStream(args[0]));
                        }catch(java.io.FileNotFoundException e)
                        {
                                System.err.println("File " + args[0] + " not found.");
                                return;
                        }
                }
                else
                {
                        System.out.println("SLP Tokeniser:  Usage is one of:");
                        System.out.println("         java BASICLTokeniser < inputfile");
                        System.out.println("OR");
                        System.out.println("         java BASICLTokeniser inputfile");
                        return;
                }
                /*
		* Weâ€™ve now initialised the tokeniser to read from the approp
		riate place,
		* so just keep reading tokens and printing them until we hit EO
		F
		*/
                for (Token t = getNextToken(); t.kind!=EOF; t = getNextToken())
                {
                // Print out the actual text for the constants, identifiers etc.
                        if (t.kind==NUM)
                        {
                                System.out.print("NUM");
                                System.out.print("("+t.image+") ");
                        }
                        else if (t.kind==ID)
                        {
                                System.out.print("ID");
                                System.out.print("("+t.image+") ");
                        }
                        else if (t.kind==BOOL)
                        {
                                System.out.print("BOOL ");
                        }
                        else if (t.kind==AND)
                        {
                                System.out.print("AND ");
                        }
                        else if (t.kind==CONST)
                        {
                                System.out.print("CONST ");
                        }
                        else if (t.kind==DO)
                        {
                                System.out.print("DO ");
                        }
                        else if (t.kind==ELSE)
                        {
                                System.out.print("ELSE ");
                        }
                        else if (t.kind==FALSE)
                        {
                                System.out.print("FALSE ");
                        }
                        else if (t.kind==IF)
                        {
                                System.out.print("IF ");
                        }
                        else if (t.kind==INT)
                        {
                                System.out.print("INT ");
                        }
                        else if (t.kind==MAIN)
                        {
                                System.out.print("MAIN ");
                        }
                        else if (t.kind==NOT)
                        {
                                System.out.print("NOT ");
                        }
                        else if (t.kind==OR)
                        {
                                System.out.print("OR ");
                        }
                        else if (t.kind==RETURN)
                        {
                                System.out.print("RETURN ");
                        }
                        else if (t.kind==THEN)
                        {
                                System.out.print("THEN ");
                        }
                        else if (t.kind==TRUE)
                        {
                                System.out.print("TRUE ");
                        }
                        else if (t.kind==VAR)
                        {
                                System.out.print("VAR ");
                        }
                        else if (t.kind==VOID)
                        {
                                System.out.print("VOID ");
                        }
                        else if (t.kind==WHILE)
                        {
                                System.out.print("WHILE ");
                        }
                        else if (t.kind==BEGIN)
                        {
                                System.out.print("BEGIN ");
                        }
                        else if (t.kind==END)
                        {
                                System.out.print("END ");
                        }
                        else if (t.kind==PLUS_SIGN)
                        {
                                System.out.print("PLUS_SIGN ");
                        }
                        else if (t.kind==MINUS_SIGN)
                        {
                                System.out.print("MINUS_SIGN ");
                        }
                        else if (t.kind==MULT_SIGN)
                        {
                                System.out.print("MULT_SIGN ");
                        }
                        else if (t.kind==DIV_SIGN)
                        {
                                System.out.print("DIV_SIGN ");
                        }
                        else if (t.kind==EQUALS_SIGN)
                        {
                                System.out.print("EQUALS_SIGN ");
                        }
                        else if (t.kind==NOT_EQUALS_SIGN)
                        {
                                System.out.print("NOT_EQUALS_SIGN ");
                        }
                        else if (t.kind==LESS_THAN)
                        {
                                System.out.print("LESS_THAN ");
                        }
                        else if (t.kind==GREATER_THAN)
                        {
                                System.out.print("GREATER_THAN ");
                        }
                        else if (t.kind==LESS_THAT_EQUALS)
                        {
                                System.out.print("LESS_THAT_EQUALS ");
                        }
                        else if (t.kind==GREATER_THAN_EQUALS)
                        {
                                System.out.print("GREATER_THAN_EQUALS ");
                        }
                        else if (t.kind==LEFT_BRACKET)
                        {
                                System.out.print("LEFT_BRACKET ");
                        }
                        else if (t.kind==RIGHT_BRACKET)
                        {
                                System.out.print("RIGHT_BRACKET ");
                        }
                        else if (t.kind==COMMA)
                        {
                                System.out.print("COMMA ");
                        }
                        else if (t.kind==SEMICOLON)
                        {
                                System.out.print("SEMICOLON ");
                        }
                        else if (t.kind==TYPE_ASSIGN)
                        {
                                System.out.print("TYPE_ASSIGN ");
                        }
                        else if (t.kind==ASSIGN)
                        {
                                System.out.print("ASSIGN ");
                        }
                        else
                                System.out.print(t.image+" ");
                }
        }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public BASICLTokeniserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }

  /** Constructor with InputStream. */
  public BASICLTokeniser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BASICLTokeniser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BASICLTokeniserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public BASICLTokeniser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new BASICLTokeniserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public BASICLTokeniser(BASICLTokeniserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BASICLTokeniserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
