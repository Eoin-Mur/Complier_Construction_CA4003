/*******************************
***** SECTION 1 - OPTIONS *****
*******************************/

options { JAVA_UNICODE_ESCAPE = true; }

/*********************************
***** SECTION 2 - USER CODE *****
*********************************/

PARSER_BEGIN(BASICLTokeniser)

public class BASICLTokeniser 
{
	public static void main(String args[]) 
	{
		BASICLTokeniser tokeniser;
		if(args.length == 0) 
		{
			System.out.println("Reading from standard input . . .");
			tokeniser = new BASICLTokeniser(System.in);
		}else if (args.length == 1) 
		{
			try 
			{
				tokeniser = new BASICLTokeniser(new java.io.FileInputStream(args[0]));
			}catch(java.io.FileNotFoundException e) 
			{
				System.err.println("File " + args[0] + " not found.");
				return;
			}
		}
		else 
		{
			System.out.println("SLP Tokeniser:  Usage is one of:");
			System.out.println("         java BASICLTokeniser < inputfile");
			System.out.println("OR");
			System.out.println("         java BASICLTokeniser inputfile");
			return;
		}
		/*
		* Weâ€™ve now initialised the tokeniser to read from the approp
		riate place,
		* so just keep reading tokens and printing them until we hit EO
		F
		*/
		for (Token t = getNextToken(); t.kind!=EOF; t = getNextToken()) 
		{
		// Print out the actual text for the constants, identifiers etc.
			if (t.kind==NUM)
			{
				System.out.print("NUM");
				System.out.print("("+t.image+") ");
			}
			else if (t.kind==ID)
			{
				System.out.print("ID");
				System.out.print("("+t.image+") ");
			}
			else
				System.out.print(t.image+" ");
		}
	}
}
PARSER_END(BASICLTokeniser)


/****************************************
***** SECTION 3 - TOKEN DEFINITIONS *****
****************************************/

TOKEN_MGR_DECLS :
{
	static int commentNesting = 0;
}

SKIP : /* COMMENTS */
{
		<"--" (["a" - "z"] | ["A" - "Z"] | ["0" - "9"] | " ")* ("\n" | "\r" |"\r\n")>
	|	"/*" { commentNesting++; } : IN_COMMENT
	
}

<IN_COMMENT> SKIP :
{
		"/*" { commentNesting++; }
	| "*/" { commentNesting--;
			if (commentNesting == 0)
				SwitchTo(DEFAULT);
			}
	| <~[]>
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
		" "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
}

TOKEN : /* Keywords */ 
{
		<AND : "and">
	|	<BOOL : "bool">
	|	<CONST : "const">
	|	<DO : "do">
	|	<ELSE : "else">
	|	<FALSE : "false">
	|	<IF : "if">
	|	<INT : "int">
	| <MAIN : "main">
	|	<NOT : "not">
	| <OR : "or">
	|	<RETURN : "return">
	| <THEN : "then">
	|	<TRUE : "true">
	| <VAR : "var">
	| <VOID : "void">
	| <WHILE : "while">
	|	<BEGIN : "begin">
	| <END : "end">
}

TOKEN : /* Identifiers */
{
		<ID : (<CHAR> | "_")+ >
	|	<#CHAR : ["a" - "z"] | ["A" - "Z"]>
}

TOKEN : /* Numbers */
{
		<NUM : (<DIGIT>)+>
	|	<#DIGIT : ["0" - "9"]>
}

TOKEN : /* Operators and Relations */
{
		<PLUS_SIGN : "+">
	|	<MINUS_SIGN : "-">
	|	<MULT_SIGN : "*">
	|	<DIV_SIGN : "/">
	|	<EQUALS_SIGN : "=">
	| <NOT_EQUALS_SIGN : "!=">
	|	<LESS_THAN : "<">
	| <GREATER_THAN : ">">
	|	<LESS_THAT_EQUALS : "<=">
	| <GREATER_THAN_EQUALS : ">=">
	|	<LEFT_BRACKET : "(">
	|	<RIGHT_BRACKET : ")">
	|	<COMMA : ",">
	|	<SEMICOLON : ";">
	|	<TYPE_ASSIGN : ":">
	|	<ASSIGN : ":=">
}

TOKEN : /* Anything not recognised so far */
{
	< OTHER : ~[] >
}

/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/

void Program() : {}
{
	Decl() // fix due to it decl already being declared one or more times no need to re-declare one or more (*)
	( Function() )*
	Main_Prog()
}

void Decl() : {}
{
	( Var_decl() | Const_decl() )*
}

void Var_decl() : {}
{
	( <VAR> Ident_list() <TYPE_ASSIGN> Type() ( <COMMA> Ident_list() <TYPE_ASSIGN> Type() )* ) 
}

void Const_decl() : {}
{
	( <CONST> <ID> <TYPE_ASSIGN> Type() <EQUALS_SIGN> Expression() ( <COMMA> <ID> <TYPE_ASSIGN> Type() <EQUALS_SIGN> Expression() )* )
}

void Function() : {}
{
	( Type() <ID> <LEFT_BRACKET> Param_list() <RIGHT_BRACKET> )
	<BEGIN>
	Decl() 
	( Stamtent() <SEMICOLON> ) *
	(<RETURN> ( Expression() | "" ) <SEMICOLON>)
	<END>
}

void Param_list() : {}
{
	( <ID> <TYPE_ASSIGN> Type() ( <COMMA> <ID> <TYPE_ASSIGN> Type() )* | "")
}

void Type() : {}
{
		<INT>
	|	<BOOL>
	|	<VOID>
}

void Main_Prog() : {}
{
	<MAIN>
	<BEGIN>
	 Decl()
	( Stamtent() <SEMICOLON>)*
	<END>
}

void Stamtent() : {}
{
		<ID> <ASSIGN> Expression()
	|	<ID> <LEFT_BRACKET> Arg_list() <RIGHT_BRACKET>
	|	<BEGIN> ( <LEFT_BRACKET> Stamtent() <SEMICOLON> <RIGHT_BRACKET> )* <END>
	|	<IF> Condition() <THEN> Stamtent() <ELSE> Stamtent()
	|	<WHILE> Condition() <DO> Stamtent()
	| ""
}

void Expression() : {}
{
		Fragment() ( ( <PLUS_SIGN> | <MINUS_SIGN> | <MULT_SIGN> | <DIV_SIGN>) Fragment() )*
	|	<ID> <LEFT_BRACKET> Arg_list() <RIGHT_BRACKET>
}

void Fragment() : {}
{
		<ID>
	|	<TRUE>
	|	<FALSE>
	|	<NUM>
	| (<PLUS_SIGN> | <MINUS_SIGN> )
	|	Fragment() //No Need ?
	|	Expression() 
}


void Condition() : {}
{
		<NOT> Expression()
	|	Expression() ( <EQUALS_SIGN> | <NOT_EQUALS_SIGN> | <LESS_THAN> | <GREATER_THAN> | <GREATER_THAN_EQUALS> | <LESS_THAT_EQUALS> | <AND> | <OR> ) Expression()
	|	<ID>
}

void Ident_list() : {}
{
	<ID> ( <COMMA> <ID> )*
}

void Arg_list() : {}
{
	<ID> ( <COMMA> <ID>)*  | ""
}