/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. BasicL.jj */
/*@egen*//*******************************
***** SECTION 1 - OPTIONS *****
*******************************/

options { 
	JAVA_UNICODE_ESCAPE = true; 
	             
	               
	                       
}

/*********************************
***** SECTION 2 - USER CODE *****
*********************************/

PARSER_BEGIN(BasicL)

import java.io.*;
import java.util.*;

public class BasicL/*@bgen(jjtree)*/implements BasicLTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTBasicLState jjtree = new JJTBasicLState();

/*@egen*/
	public static void main(String args[]) throws ParseException, FileNotFoundException
	{

		if (args.length < 1)
    {
      System.out.println("Please pass in the filename.");
      System.exit(1);
    }

		BasicL parser = new BasicL(new FileInputStream(args[0]));

    ASTProgram root = parser.Program();

    System.out.println("Abstract Syntax Tree:");

    root.dump(" ");
	}
}

PARSER_END(BasicL)

/****************************************
***** SECTION 3 - TOKEN DEFINITIONS *****
****************************************/

TOKEN_MGR_DECLS :
{
	static int commentNesting = 0;
}

SKIP : /* COMMENTS */
{
		<"--" (["a" - "z"] | ["A" - "Z"] | ["0" - "9"] | " ")* ("\n" | "\r" |"\r\n")>
	|	"/*" { commentNesting++; } : IN_COMMENT
	
}

<IN_COMMENT> SKIP :
{
		"/*" { commentNesting++; }
	| "*/" { commentNesting--;
			if (commentNesting == 0)
				SwitchTo(DEFAULT);
			}
	| <~[]>
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
		" "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
}

TOKEN : /* Keywords */ 
{
		<AND : "and">
	|	<BOOL : "bool">
	|	<CONST : "const">
	|	<DO : "do">
	|	<ELSE : "else">
	|	<FALSE : "false">
	|	<IF : "if">
	|	<INT : "int">
	| <DOUBLE: "double">
	| <MAIN : "main">
	|	<NOT : "not">
	| <OR : "or">
	|	<RETURN : "return">
	| <THEN : "then">
	|	<TRUE : "true">
	| <VAR : "var">
	| <VOID : "void">
	| <WHILE : "while">
	|	<BEGIN : "begin">
	| <END : "end">
}

 TOKEN : /* Identifiers */
 {
		<ID : <CHAR> (<DIGIT> | <CHAR> | "_" )* >
 	|	<#CHAR : ["a" - "z"] | ["A" - "Z"]>
 }

TOKEN : /* Numbers */
{
		<NUM : (<DIGIT>)+>
	|	<REAL: ( (<DIGIT>)+ "." (<DIGIT>)*) | ((<DIGIT>)* "." (<DIGIT>)+) >
	|	<#DIGIT : ["0" - "9"]>
}

TOKEN : /* Operators and Relations */
{
		<PLUS_SIGN : "+">
	|	<MINUS_SIGN : "-">
	|	<MULT_SIGN : "*">
	|	<DIV_SIGN : "/">
	|	<EQUALS_SIGN : "=">
	| <NOT_EQUALS_SIGN : "!=">
	|	<LESS_THAN : "<">
	| <GREATER_THAN : ">">
	|	<LESS_THAT_EQUALS : "<=">
	| <GREATER_THAN_EQUALS : ">=">
	|	<LEFT_BRACKET : "(">
	|	<RIGHT_BRACKET : ")">
	|	<COMMA : ",">
	|	<SEMICOLON : ";">
	|	<TYPE_ASSIGN : ":">
	|	<ASSIGN : ":=">
}

TOKEN : /* Anything not recognised so far */
{
	< OTHER : ~[] >
}

/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/

ASTProgram Program()          : {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
        try {
/*@egen*/
	( Decl() )* // fix due to it decl already being declared one or more times no need to re-declare one or more (*)
	( Function() )*
	Main_Prog()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Decl() : {}
{
	( Var_decl() | Const_decl() ) 
}

void Var_decl() : {}
{
	<VAR> Ident_list() <TYPE_ASSIGN> Type() ( <COMMA> Ident_list() <TYPE_ASSIGN> Type() )* <SEMICOLON>
}

void Const_decl() : {}
{
	( <CONST> Indentifier() <TYPE_ASSIGN> Type() <EQUALS_SIGN> Expression() ( <COMMA> Indentifier() <TYPE_ASSIGN> Type() <EQUALS_SIGN> Expression() )* <SEMICOLON>)
}

void Function()           : {/*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Function */
        try {
/*@egen*/
	( Type() Indentifier() <LEFT_BRACKET> Param_list() <RIGHT_BRACKET> )
	<BEGIN>
	( Decl() )* 
	( Statment() <SEMICOLON> ) *
	(<RETURN> ( Expression() | {} ) <SEMICOLON>)
	<END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Param_list() : {}
{
	( Indentifier() <TYPE_ASSIGN> Type() ( <COMMA> Indentifier() <TYPE_ASSIGN> Type() )* | {})
}

void Type() : {}
{
		<INT>
	| <DOUBLE>
	|	<BOOL>
	|	<VOID>
}

void Main_Prog()       : {/*@bgen(jjtree) Main */
  ASTMain jjtn000 = new ASTMain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Main */
        try {
/*@egen*/
	<MAIN>
	<BEGIN>
	( Decl() )*
	( Statment() <SEMICOLON>)*
	<END>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Statment() : {}
{/*@bgen(jjtree) #Assign( 2) */
                {
                  ASTAssign jjtn001 = new ASTAssign(JJTASSIGN);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/
		(	
			Indentifier() (<ASSIGN> Expression() | Arg_list() ) 
		)/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/           	
	|	<BEGIN> ( Statment() <SEMICOLON> )* <END>
	|	<IF> Condition() <THEN> Statment() <SEMICOLON> <ELSE> Statment() 
	|	<WHILE> Condition() <DO> Statment()
	| {} // this will allow you to just stick aload of semicolons in the file and will parse correctly !!!
}


void Expression() : {}
{
		AddExpression()
}

void AddExpression() : {}
{/*@bgen(jjtree) #Add(> 1) */
        {
          ASTAdd jjtn001 = new ASTAdd(JJTADD);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
		MultExpression() ( ( <PLUS_SIGN> | <MINUS_SIGN> ) MultExpression() )*
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/         
}

void MultExpression() : {}
{/*@bgen(jjtree) #Mult(> 1) */
        {
          ASTMult jjtn001 = new ASTMult(JJTMULT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(
		Fragment() ( ( <MULT_SIGN> | <DIV_SIGN> ) Fragment() )*
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/          
}

void Fragment() : {}
{

		Bool()
	| Indentifier() [ Arg_list() ]
	|	Number()
	| <REAL>
	| <LEFT_BRACKET> Expression() <RIGHT_BRACKET>
}

void BoolOpp() : {}
{
	(
			<EQUALS_SIGN> 
		| <NOT_EQUALS_SIGN> 
		| <LESS_THAN> 
		| <GREATER_THAN> 
		| <GREATER_THAN_EQUALS> 
		| <LESS_THAT_EQUALS> 
		| <AND> 
		| <OR>
	)	
}


void Condition() : {}
{
		<NOT> Condition()
	|/*@bgen(jjtree) #Condition(> 1) */
          {
            ASTCondition jjtn001 = new ASTCondition(JJTCONDITION);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ (
		 [<LEFT_BRACKET>] Expression() ( ( BoolOpp() ) Expression()  [<RIGHT_BRACKET>] ) *
		)/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
          }
/*@egen*/               
}

void Ident_list() : {}
{
	Indentifier() ( <COMMA> Indentifier() )*
}

void Arg_list() : {}
{
	<LEFT_BRACKET> (Indentifier() ( <COMMA> Indentifier())*  | {}) <RIGHT_BRACKET>
}

void Indentifier()     : {/*@bgen(jjtree) Id */
                           ASTId jjtn000 = new ASTId(JJTID);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Id */
        try {
/*@egen*/
	t = <ID>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Number()      : {/*@bgen(jjtree) Num */
                       ASTNum jjtn000 = new ASTNum(JJTNUM);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Num */
        try {
/*@egen*/
	t = <NUM>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setName(t.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Bool()        : {/*@bgen(jjtree) Bool */
  ASTBool jjtn000 = new ASTBool(JJTBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Bool */
                try {
/*@egen*/
		<TRUE>
	|	<FALSE>/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}
