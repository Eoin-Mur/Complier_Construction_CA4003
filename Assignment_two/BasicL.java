/* Generated By:JJTree&JavaCC: Do not edit this line. BasicL.java */
import java.io.*;
import java.util.*;

public class BasicL/*@bgen(jjtree)*/implements BasicLTreeConstants, BasicLConstants {/*@bgen(jjtree)*/
  protected static JJTBasicLState jjtree = new JJTBasicLState();public static void main(String args[]) throws ParseException, FileNotFoundException
        {

                if (args.length < 1)
    {
      System.out.println("Please pass in the filename.");
      System.exit(1);
    }

                BasicL parser = new BasicL(new FileInputStream(args[0]));

    SimpleNode root = parser.Program();

    System.out.println("Abstract Syntax Tree:");

    root.dump(" ");
        }

/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/
  static final public SimpleNode Program() throws ParseException {
                        /*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONST:
        case VAR:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Decl();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOL:
        case INT:
        case DOUBLE:
        case VOID:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        Function();
      }
      Main_Prog();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Decl() throws ParseException {
               /*@bgen(jjtree) Decl */
  SimpleNode jjtn000 = new SimpleNode(JJTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        Var_decl();
        break;
      case CONST:
        Const_decl();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Var_decl() throws ParseException {
                            /*@bgen(jjtree) VarDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VAR);
      Ident_list();
      jj_consume_token(TYPE_ASSIGN);
      Type();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        Ident_list();
        jj_consume_token(TYPE_ASSIGN);
        Type();
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Const_decl() throws ParseException {
                                /*@bgen(jjtree) ConstDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONST);
      jj_consume_token(ID);
      jj_consume_token(TYPE_ASSIGN);
      Type();
      jj_consume_token(EQUALS_SIGN);
      Expression();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        jj_consume_token(ID);
        jj_consume_token(TYPE_ASSIGN);
        Type();
        jj_consume_token(EQUALS_SIGN);
        Expression();
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Function() throws ParseException {
                             /*@bgen(jjtree) Function */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      jj_consume_token(ID);
      jj_consume_token(LEFT_BRACKET);
      Param_list();
      jj_consume_token(RIGHT_BRACKET);
      jj_consume_token(BEGIN);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONST:
        case VAR:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_5;
        }
        Decl();
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case BEGIN:
        case ID:
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
        Statment();
        jj_consume_token(SEMICOLON);
      }
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case TRUE:
      case ID:
      case NUM:
      case REAL:
      case LEFT_BRACKET:
        Expression();
        break;
      default:
        jj_la1[7] = jj_gen;

      }
      jj_consume_token(SEMICOLON);
      jj_consume_token(END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Param_list() throws ParseException {
                                /*@bgen(jjtree) ParamList */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
        jj_consume_token(TYPE_ASSIGN);
        Type();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_7;
          }
          jj_consume_token(COMMA);
          jj_consume_token(ID);
          jj_consume_token(TYPE_ASSIGN);
          Type();
        }
        break;
      default:
        jj_la1[9] = jj_gen;
                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                               jjtc000 = false;

      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Type() throws ParseException {
               /*@bgen(jjtree) Type */
               SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        t = jj_consume_token(INT);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.value = t.image;
        break;
      case DOUBLE:
        t = jj_consume_token(DOUBLE);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.value = t.image;
        break;
      case BOOL:
        t = jj_consume_token(BOOL);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.value = t.image;
        break;
      case VOID:
        t = jj_consume_token(VOID);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.value = t.image;
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  static final public void Main_Prog() throws ParseException {
                          /*@bgen(jjtree) Main */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIN);
      jj_consume_token(BEGIN);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONST:
        case VAR:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_8;
        }
        Decl();
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case BEGIN:
        case ID:
        case SEMICOLON:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_9;
        }
        Statment();
        jj_consume_token(SEMICOLON);
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Statment() throws ParseException {
                             /*@bgen(jjtree) Statment */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          Expression();
          break;
        case LEFT_BRACKET:
          Arg_list();
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case BEGIN:
        jj_consume_token(BEGIN);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case WHILE:
          case BEGIN:
          case ID:
          case SEMICOLON:
            ;
            break;
          default:
            jj_la1[14] = jj_gen;
            break label_10;
          }
          Statment();
          jj_consume_token(SEMICOLON);
        }
        jj_consume_token(END);
        break;
      case IF:
        jj_consume_token(IF);
        Condition();
        jj_consume_token(THEN);
        Statment();
        jj_consume_token(SEMICOLON);
        jj_consume_token(ELSE);
        Statment();
        break;
      case WHILE:
        jj_consume_token(WHILE);
        Condition();
        jj_consume_token(DO);
        Statment();
        break;
      default:
        jj_la1[15] = jj_gen;
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;

      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  static final public void Expression() throws ParseException {
                          /*@bgen(jjtree) Exp */
  SimpleNode jjtn000 = new SimpleNode(JJTEXP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACKET:
          Arg_list();
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        Expression1();
        break;
      case FALSE:
      case TRUE:
      case NUM:
      case REAL:
      case LEFT_BRACKET:
        Fragment();
        Expression1();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  static final public void Expression1() throws ParseException {
                      /*@bgen(jjtree) Expression1 */
                      SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION1);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t; String name;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_SIGN:
        t = jj_consume_token(PLUS_SIGN);
        Expression();
                                                   SimpleNode jjtn001 = new SimpleNode(JJTADDOP);
                                                   boolean jjtc001 = true;
                                                   jjtree.openNodeScope(jjtn001);
        try {
                                                   jjtree.closeNodeScope(jjtn001,  2);
                                                   jjtc001 = false;
                                                  jjtn001.value = t.image;
        } finally {
                                                   if (jjtc001) {
                                                     jjtree.closeNodeScope(jjtn001,  2);
                                                   }
        }
        break;
      case MINUS_SIGN:
        t = jj_consume_token(MINUS_SIGN);
        Expression();
                                                SimpleNode jjtn002 = new SimpleNode(JJTSUBOP);
                                                boolean jjtc002 = true;
                                                jjtree.openNodeScope(jjtn002);
        try {
                                                jjtree.closeNodeScope(jjtn002,  2);
                                                jjtc002 = false;
                                               jjtn002.value = t.image;
        } finally {
                                                if (jjtc002) {
                                                  jjtree.closeNodeScope(jjtn002,  2);
                                                }
        }
        break;
      case MULT_SIGN:
        t = jj_consume_token(MULT_SIGN);
        Expression();
                                                  SimpleNode jjtn003 = new SimpleNode(JJTMULOP);
                                                  boolean jjtc003 = true;
                                                  jjtree.openNodeScope(jjtn003);
        try {
                                                  jjtree.closeNodeScope(jjtn003,  2);
                                                  jjtc003 = false;
                                              jjtn003.value = t.image;
        } finally {
                                                  if (jjtc003) {
                                                    jjtree.closeNodeScope(jjtn003,  2);
                                                  }
        }
        break;
      case DIV_SIGN:
        t = jj_consume_token(DIV_SIGN);
        Expression();
                                              SimpleNode jjtn004 = new SimpleNode(JJTDIVOP);
                                              boolean jjtc004 = true;
                                              jjtree.openNodeScope(jjtn004);
        try {
                                              jjtree.closeNodeScope(jjtn004,  2);
                                              jjtc004 = false;
                                             jjtn004.value = t.image;
        } finally {
                                              if (jjtc004) {
                                                jjtree.closeNodeScope(jjtn004,  2);
                                              }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;

      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  static final public void Opp() throws ParseException {
              /*@bgen(jjtree) Opp */
  SimpleNode jjtn000 = new SimpleNode(JJTOPP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_SIGN:
        jj_consume_token(PLUS_SIGN);
        break;
      case MINUS_SIGN:
        jj_consume_token(MINUS_SIGN);
        break;
      case MULT_SIGN:
        jj_consume_token(MULT_SIGN);
        break;
      case DIV_SIGN:
        jj_consume_token(DIV_SIGN);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  static final public void Fragment() throws ParseException {
                   /*@bgen(jjtree) Fragment */
  SimpleNode jjtn000 = new SimpleNode(JJTFRAGMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      case NUM:
        jj_consume_token(NUM);
        break;
      case REAL:
        jj_consume_token(REAL);
        break;
      case LEFT_BRACKET:
        jj_consume_token(LEFT_BRACKET);
        Expression();
        jj_consume_token(RIGHT_BRACKET);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  static final public void BoolOpp() throws ParseException {
                  /*@bgen(jjtree) BoolOpp */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLOPP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS_SIGN:
        jj_consume_token(EQUALS_SIGN);
        break;
      case NOT_EQUALS_SIGN:
        jj_consume_token(NOT_EQUALS_SIGN);
        break;
      case LESS_THAN:
        jj_consume_token(LESS_THAN);
        break;
      case GREATER_THAN:
        jj_consume_token(GREATER_THAN);
        break;
      case GREATER_THAN_EQUALS:
        jj_consume_token(GREATER_THAN_EQUALS);
        break;
      case LESS_THAT_EQUALS:
        jj_consume_token(LESS_THAT_EQUALS);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  static final public void Condition() throws ParseException {
                               /*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        Condition();
        break;
      case FALSE:
      case TRUE:
      case ID:
      case NUM:
      case REAL:
      case LEFT_BRACKET:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACKET:
          jj_consume_token(LEFT_BRACKET);
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        Expression();
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
          case OR:
          case EQUALS_SIGN:
          case NOT_EQUALS_SIGN:
          case LESS_THAN:
          case GREATER_THAN:
          case LESS_THAT_EQUALS:
          case GREATER_THAN_EQUALS:
            ;
            break;
          default:
            jj_la1[23] = jj_gen;
            break label_11;
          }
          BoolOpp();
          Expression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RIGHT_BRACKET:
            jj_consume_token(RIGHT_BRACKET);
            break;
          default:
            jj_la1[24] = jj_gen;
            ;
          }
        }
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  static final public void Ident_list() throws ParseException {
                     /*@bgen(jjtree) Ident_list */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        jj_consume_token(ID);
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Arg_list() throws ParseException {
                   /*@bgen(jjtree) Arg_list */
  SimpleNode jjtn000 = new SimpleNode(JJTARG_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFT_BRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        jj_consume_token(ID);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[27] = jj_gen;
            break label_13;
          }
          jj_consume_token(COMMA);
          jj_consume_token(ID);
        }
        break;
      default:
        jj_la1[28] = jj_gen;

      }
      jj_consume_token(RIGHT_BRACKET);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public BasicLTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4002000,0x80c1000,0x4002000,0x0,0x0,0x4002000,0xb0020000,0x82010000,0x0,0x80000000,0x80c1000,0x4002000,0xb0020000,0x0,0xb0020000,0xb0020000,0x0,0x82010000,0x0,0x0,0x2010000,0x400800,0x0,0x400800,0x0,0x82210000,0x0,0x0,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x10000,0x10000,0x0,0x20000,0x4006,0x10000,0x0,0x0,0x0,0x20000,0x84000,0x20000,0x0,0x4000,0x4006,0xf0,0xf0,0x4006,0x3f00,0x4000,0x3f00,0x8000,0x4006,0x10000,0x10000,0x0,};
   }

  /** Constructor with InputStream. */
  public BasicL(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BasicL(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BasicLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public BasicL(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new BasicLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public BasicL(BasicLTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BasicLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
