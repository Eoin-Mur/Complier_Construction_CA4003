/*******************************
***** SECTION 1 - OPTIONS *****
*******************************/

options { 
	JAVA_UNICODE_ESCAPE = true; 
	MULTI = true;
	VISITOR = true;
	NODE_DEFAULT_VOID=true;
}

/*********************************
***** SECTION 2 - USER CODE *****
*********************************/

PARSER_BEGIN(BasicL)

import java.io.*;
import java.util.*;

public class BasicL
{
	public static Hashtable ST = new Hashtable();
	public static void main(String args[]) throws ParseException, FileNotFoundException
	{

		String temp;
		String temp2;

		if (args.length < 1)
    {
      System.out.println("Please pass in the filename.");
      System.exit(1);
    }

		BasicL parser = new BasicL(new FileInputStream(args[0]));

    ASTProgram root = parser.Program();

    System.out.println("Abstract Syntax Tree:");

    root.dump(" ");
		

	}
}

PARSER_END(BasicL)

/****************************************
***** SECTION 3 - TOKEN DEFINITIONS *****
****************************************/

TOKEN_MGR_DECLS :
{
	static int commentNesting = 0;
}

SKIP : /* COMMENTS */
{
		<"--" (["a" - "z"] | ["A" - "Z"] | ["0" - "9"] | " ")* ("\n" | "\r" |"\r\n")>
	|	"/*" { commentNesting++; } : IN_COMMENT
	
}

<IN_COMMENT> SKIP :
{
		"/*" { commentNesting++; }
	| "*/" { commentNesting--;
			if (commentNesting == 0)
				SwitchTo(DEFAULT);
			}
	| <~[]>
}

SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
		" "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
}

TOKEN : /* Keywords */ 
{
		<AND : "and">
	|	<BOOL : "bool">
	|	<CONST : "const">
	|	<DO : "do">
	|	<ELSE : "else">
	|	<FALSE : "false">
	|	<IF : "if">
	|	<INT : "int">
	| <DOUBLE: "double">
	| <MAIN : "main">
	|	<NOT : "not">
	| <OR : "or">
	|	<RETURN : "return">
	| <THEN : "then">
	|	<TRUE : "true">
	| <VAR : "var">
	| <VOID : "void">
	| <WHILE : "while">
	|	<BEGIN : "begin">
	| <END : "end">
}

 TOKEN : /* Identifiers */
 {
		<ID : <CHAR> (<DIGIT> | <CHAR> | "_" )* >
 	|	<#CHAR : ["a" - "z"] | ["A" - "Z"]>
 }

TOKEN : /* Numbers */
{
		<NUM : (<DIGIT>)+>
	|	<REAL: ( (<DIGIT>)+ "." (<DIGIT>)*) | ((<DIGIT>)* "." (<DIGIT>)+) >
	|	<#DIGIT : ["0" - "9"]>
}

TOKEN : /* Operators and Relations */
{
		<PLUS_SIGN : "+">
	|	<MINUS_SIGN : "-">
	|	<MULT_SIGN : "*">
	|	<DIV_SIGN : "/">
	|	<EQUALS_SIGN : "=">
	| <NOT_EQUALS_SIGN : "!=">
	|	<LESS_THAN : "<">
	| <GREATER_THAN : ">">
	|	<LESS_THAT_EQUALS : "<=">
	| <GREATER_THAN_EQUALS : ">=">
	|	<LEFT_BRACKET : "(">
	|	<RIGHT_BRACKET : ")">
	|	<COMMA : ",">
	|	<SEMICOLON : ";">
	|	<TYPE_ASSIGN : ":">
	|	<ASSIGN : ":=">
}

TOKEN : /* Anything not recognised so far */
{
	< OTHER : ~[] >
}

/***********************************
***** SECTION 4 - THE GRAMMAR *****
***********************************/

ASTProgram Program() #Program : {}
{
	( Decl() )* // fix due to it decl already being declared one or more times no need to re-declare one or more (*)
	( Function_Decl() )*
	Main_Prog()
	{ return jjtThis; }
}

void Decl() : {}
{
	(
	 	Var_decl() 
	) #Decl(>1)
	| (
			Const_decl()
		)	#ConstDecl(>1)
}

void Var_decl() : {}
{
	(	<VAR> Ident_list() <TYPE_ASSIGN> Type() ( <COMMA> Ident_list() <TYPE_ASSIGN> Type() )* ) <SEMICOLON>
}

void Const_decl() : {}
{
	( <CONST> Indentifier() <TYPE_ASSIGN> Type() <EQUALS_SIGN> Expression() ( <COMMA> Indentifier() <TYPE_ASSIGN> Type() <EQUALS_SIGN> Expression() )* <SEMICOLON>)
}

void Function_Decl() #Function_Decl : {}
{
	( Type() Indentifier() <LEFT_BRACKET> Param_list() <RIGHT_BRACKET> )
	( Function() )
}

void Function() #Function	 : {}
{
	<BEGIN>
	( Decl() )* 
	( Statment() <SEMICOLON> ) *
	(<RETURN> ( Expression() | {} ) <SEMICOLON>)
	<END>
}

void Param_list() : {}
{
	(
		Indentifier() <TYPE_ASSIGN> Type() ( <COMMA> Indentifier() <TYPE_ASSIGN> Type() )* 
	) #Params(>1)
	| {}
}

void Type() #Type : {Token t;}
{
	t =	<INT>  {jjtThis.setName(t.image);} 
	| t = <DOUBLE> {jjtThis.setName(t.image);} 
	|	t = <BOOL> {jjtThis.setName(t.image);} 
	|	t =<VOID> {jjtThis.setName(t.image);}
}

void Main_Prog() #Main : {}
{
	<MAIN>
	<BEGIN>
	( Decl() )*
	( Statment() <SEMICOLON>)*
	<END>
}

void Statment() : {}
{
		(	
			Indentifier() (<ASSIGN> Expression() | Arg_list() ) 
		) #Assign(2)	
	|	<BEGIN> ( Statment() <SEMICOLON> )* <END>
	|	<IF> Condition() <THEN> Statment() <SEMICOLON> <ELSE> Statment()   
	|	<WHILE> Condition() <DO> Statment()
	| {} // this will allow you to just stick aload of semicolons in the file and will parse correctly !!!
}


//fixed expression to allow for the function call in condition to work properly!
void Expression() : {}
{
	LOOKAHEAD(2)
	FunctionCall()
	| AddExpression()
}

void AddExpression() : {}
{
	(
		MultExpression() ( ( <PLUS_SIGN> | <MINUS_SIGN> ) MultExpression() )*
	) #Add(>1)
}

void MultExpression() : {}
{
	(
		Fragment() ( ( <MULT_SIGN> | <DIV_SIGN> ) Fragment() )*
	) #Mult(>1)
}

void Fragment() : {}
{
		Indentifier() 
	|	Bool()	
	|	Number()
	| <REAL>
	| <LEFT_BRACKET> Expression() <RIGHT_BRACKET>
}

void BoolOpp() #BoolOpp : { Token t; }
{
	(
			t = <EQUALS_SIGN> {jjtThis.setName(t.image);} 
		| t = <NOT_EQUALS_SIGN> {jjtThis.setName(t.image);} 
		| t = <LESS_THAN> {jjtThis.setName(t.image);} 
		| t = <GREATER_THAN> {jjtThis.setName(t.image);} 
		| t = <GREATER_THAN_EQUALS> {jjtThis.setName(t.image);} 
		| t = <LESS_THAT_EQUALS> {jjtThis.setName(t.image);} 
		| t = <AND> {jjtThis.setName(t.image);} 
		| t = <OR> {jjtThis.setName(t.image);} 
	)	
}


void Condition() : {}
{
		<NOT> Condition()
	| (
		 [<LEFT_BRACKET>] Expression() ( ( BoolOpp() ) Expression()  [<RIGHT_BRACKET>] ) *
		) #Condition(>0)
}

void Ident_list() : {}
{
	Indentifier() ( <COMMA> Indentifier() )*
}

void Arg_list() : {}
{
	<LEFT_BRACKET> (Indentifier() ( <COMMA> Indentifier())*  | {}) <RIGHT_BRACKET>
}

void Indentifier() #Id : { Token t; }
{
	t = <ID>
  {
    jjtThis.setName(t.image);
  }
}

void Number() #Num : { Token t; }
{
	t = <NUM>
	{
		jjtThis.setName(t.image);
	}
}

void Bool() #Bool : {Token t;}
{
	t =	<TRUE> {jjtThis.setName(t.image);}
	| t =	<FALSE> {jjtThis.setName(t.image);}
}

void FunctionCall() #FunctionCall : {}
{
	Indentifier() Arg_list()
}